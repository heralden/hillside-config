/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_L 0
#define NUMSYM_L 1
#define FUN_L    2
#define EXTRA_L  3

#define Undo   LG(Z)
#define Cut    LG(X)
#define Copy   LG(C)
#define Paste  LG(V)
#define Redo   LG(Y)

// MacOS
/* #define NOR_AE      RALT(KC_QUOTE) */
/* #define NOR_OE      RALT(KC_O) */
/* #define NOR_AA      RALT(KC_A) */
// Linux
#define NOR_AE      RA(Z)
#define NOR_OE      RA(L)
#define NOR_AA      RA(W)


/ {
        combos {
            compatible = "zmk,combos";

            escape {
                timeout-ms = <50>;
                key-positions = <30 40>;
                bindings = <&kp ESC>;
            };

            enter {
                timeout-ms = <50>;
                key-positions = <31 43>;
                bindings = <&kp ENTER>;
            };
        };

        behaviors {
            skq: sticky_key_quick_release {
                compatible = "zmk,behavior-sticky-key";
                label = "STICKY_KEY_QUICK_RELEASE";
                #binding-cells = <1>;
                bindings = <&kp>;
                release-after-ms = <1000>;
                quick-release;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
/* QWERTY
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   E   |   R   |   T   |-----------------------------------|   Y   |   U   |   I   |   O   |   P   |   -   |
 * |OSMLSft|   A   |   S   |   D   |   F   |   G   |-----------------------------------|   H   |   J   |   K   |   L   |   ;   |OSMLSft|
 * | \     |   Z   |   X   |   C   |   V   |   B   |  ESC  |-------------------| ENTER |   N   |   M   |   ,   |   .   |   '   |   /   |
 *                                 |  GUI  |  WM   |  BKSP |  FUN  |---| NumSym| SPACE |  CTRL |  ALT  |
 */
                        bindings = <
&kp  GRAVE    &kp  Q        &kp  W        &kp  E        &kp  R        &kp  T                                                                         &kp  Y        &kp  U        &kp  I        &kp  O        &kp  P        &kp  MINUS
&skq LSHIFT   &kp  A        &kp  S        &kp  D        &kp  F        &kp  G                                                                         &kp  H        &kp  J        &kp  K        &kp  L        &kp  SEMI     &skq LSHIFT
&kp  BSLH     &kp  Z        &kp  X        &kp  C        &kp  V        &kp  B        &kp  ESC                                           &kp ENTER     &kp  N        &kp  M        &kp  COMMA    &kp  DOT      &kp  SQT      &kp  SLASH
                                                        &skq LGUI     &skq LC(LGUI) &kp  BKSP      &sl  FUN_L           &sl  NUMSYM_L  &kp SPACE     &skq LCTRL    &skq LALT
                        >;
                };
		
                numsym_layer {
/* NUMSYM
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |Insert |   !   |   @   |   #   |   $   |   %   |-----------------------------------|   ^   |   &   |   *   |   (   |   )   |   -   |
 * |PrnScrn|   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   |   +   |
 * |ScrLck |       |       |       |       |       | Delete|-------------------|       |       | Space |   ,   |   .   |   =   |   /   |
 *                                 |       |       |       |  Extra |---|      |       |       |       |
 */
                        bindings = <
&kp INS     &kp  EXCL     &kp  AT       &kp  HASH     &kp  DOLLAR   &kp  PERCENT                                                                   &kp  CARET    &kp  AMPS     &kp  ASTRK    &kp  LPAR     &kp  RPAR     &kp MINUS
&kp PSCRN   &kp  N1       &kp  N2       &kp  N3       &kp  N4       &kp  N5                                                                        &kp  N6       &kp  N7       &kp  N8       &kp  N9       &kp  N0       &kp PLUS
&kp SLCK    &none         &none         &none         &none         &none         &kp  DEL                                           &trans        &none         &kp  SPACE    &kp  COMMA    &kp  DOT      &kp  EQUAL    &kp SLASH
                                                      &trans        &trans        &trans       &sl EXTRA_L              &trans       &trans        &trans        &trans
                        >;
                };
		
                fun_layer {
/* FUN
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | Cut   |       | Mute  |       |       | Play  |-----------------------------------| Play  |   {   |   }   |   [   |   ]   |  Å    |
 * | Copy  | BriUp | Vol+  | Home  | PgUp  |PrvTab |-----------------------------------| Left  |  Down |  Up   | Right |   Ø   |  Æ    |
 * | Paste | BriDn | Vol-  | End   | PgDn  |NxtTab |       |-------------------|       | BegLn | EndLn |  (    |  )    |   =   |  +    |
 *                                 |       |       |       |       |---|       |       |       |       |
 */
                        bindings = <
&kp  Cut      &none         &kp  C_MUTE   &none         &none         &kp  C_PLAY_PAUSE                                                              &kp C_PLAY_PAUSE &kp  LBRC    &kp   RBRC    &kp   LBKT    &kp  RBKT     &kp NOR_AA
&kp  Copy     &kp  C_BRI_UP &kp  C_VOL_UP &kp  HOME     &kp  PG_UP    &kp  LC(LS(TAB))                                                               &kp   LEFT       &kp  DOWN    &kp   UP      &kp   RIGHT   &kp  NOR_OE   &kp NOR_AE
&kp  Paste    &kp  C_BRI_DN &kp  C_VOL_DN &kp  END      &kp  PG_DN    &kp  LC(TAB)  &trans                                             &trans        &kp   HOME       &kp  END     &kp   LPAR    &kp   RPAR    &kp  EQUAL    &kp PLUS
                                                        &trans        &trans        &trans        &trans                 &trans        &trans        &trans           &trans
                        >;
                };

                extra_layer {
/* EXTRA
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       |       |       |       |       |       |-----------------------------------|       |       |       |       |       |       |
 * |       | F1    | F2    | F3    | F4    | F5    |-----------------------------------| F6    | F7    | F8    | F9    | F10   | F11   |
 * |       | BT 0  | BT 1  | BT 2  | BT 3  | BT 4  |       |-------------------|       |       | BT CLR|OUT_USB|OUT_BLE|       | F12   |
 *                                 |       |       |       |       |---|       |       |       |       |
 */
                        bindings = <
&none         &none         &none         &none         &none         &none                                                                             &none             &none              &none            &none             &none              &none
&none         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                                                            &kp F6            &kp F7             &kp F8           &kp F9            &kp F10            &kp F11
&none         &bt  BT_SEL 0 &bt  BT_SEL 1 &bt  BT_SEL 2 &bt  BT_SEL 3 &bt  BT_SEL 4 &trans                                             &trans           &none             &bt BT_CLR         &out  OUT_USB    &out  OUT_BLE     &none              &kp F12
                                                        &trans        &trans        &trans        &trans                 &trans        &trans           &trans            &trans 
                        >;

                };
        };
};
